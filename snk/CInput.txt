static class CInput extends MonoBehaviour{
	var axes:CAxis[]=new CAxis[0];
	var buttons:CButton[]=new CButton[0];
	
	function GetAxis(nm:String):float{
		for(var ax in axes){
			if(ax.name==nm)
				return ax.value;
		}
		return 0;
	}
	function GetButton(nm:String):boolean{
		for(var bt in buttons){
			if(bt.name==nm)
				return bt.framesHeld>0;
		}
		return false;
	}
	function GetButtonDown(nm:String):boolean{
		for(var bt in buttons){
			if(bt.name==nm)
				return bt.framesHeld==1;
		}
		return false;
	}
	function GetButtonUp(nm:String):boolean{
		for(var bt in buttons){
			if(bt.name==nm)
				return bt.framesHeld==0&&bt.previousFramesHeld>0;
		}
		return false;
	}
	
	function CUpdate(){
		var tm:int;
		var dir:int;
		for(var bt in buttons){
			bt.previousFramesHeld=bt.framesHeld;
			if(Input.GetKey(bt.positiveButton))
				bt.framesHeld++;
			else if(Input.GetKeyUp(bt.positiveButton))
				bt.framesHeld=0;
		}
		for(var ax in axes){
			tm=0;
			dir=0;
			if(Input.GetKey(ax.positiveButton))
				tm+=1;
			if(Input.GetKey(ax.negativeButton))
				tm-=1;
			dir=(ax.value<tm?1:-1);
			ax.value+=Time.deltaTime*ax.sensitivity*dir;
			ax.value=Mathf.Clamp(ax.value,-1,1);
			if((ax.value<tm?1:-1)!=dir)
				ax.value=tm;
			dir=0;
			tm=0;
		}
	}
	
	
	function SaveInputs(){
		var ss:String;
		for(var ax in axes)
			ss+=ax.name+";"+parseInt(ax.negativeButton)+";"+parseInt(ax.positiveButton)+"|";
		PlayerPrefs.SetString("Axes",ss);
		ss="";
		for(var bt in buttons)
			ss+=bt.name+";"+parseInt(bt.positiveButton)+"|";
		PlayerPrefs.SetString("Buttons",ss);
	}
	function InitializeInputs(){
		buttons=new CButton[14];
		axes=new CAxis[2];
		axes[0]=new CAxis("Horizontal",KeyCode.A,KeyCode.D,6.0);
		axes[1]=new CAxis("Vertical",KeyCode.S,KeyCode.W,6.0);
		buttons[0]=new CButton("Sprint",KeyCode.LeftShift);
		buttons[1]=new CButton("Roll",KeyCode.Space);
		buttons[2]=new CButton("Pickup",KeyCode.Mouse1);
		buttons[3]=new CButton("Use",KeyCode.E);
		buttons[4]=new CButton("Flashlight",KeyCode.Q);
		buttons[5]=new CButton("Aim",KeyCode.Mouse1);
		buttons[6]=new CButton("Throw",KeyCode.Mouse0);
		buttons[7]=new CButton("Toggle First Person",KeyCode.R);
		buttons[8]=new CButton("Objectives Menu",KeyCode.Tab);
		buttons[9]=new CButton("Notes",KeyCode.N);
		buttons[10]=new CButton("Skip Dialogue",KeyCode.LeftControl);
		buttons[11]=new CButton("Help",KeyCode.F1);
		buttons[12]=new CButton("Previous Item",KeyCode.Alpha2);
		buttons[13]=new CButton("Next Item",KeyCode.Alpha1);
	}
	function ReadInputs(){
		if(!PlayerPrefs.HasKey("Axes")||!PlayerPrefs.HasKey("Buttons")){
			InitializeInputs();
			SaveInputs();
			return;
		}
		var ss:String=PlayerPrefs.GetString("Axes");
		var sa:String[]=ss.Split("|"[0]);
		axes=new CAxis[sa.length-1];
		for(var i:int=0;i<axes.length;i++){
			axes[i]=new CAxis(sa[i].Split(";"[0])[0],int.Parse(sa[i].Split(";"[0])[1]),int.Parse(sa[i].Split(";"[0])[2]),6.0);
		}
		ss=PlayerPrefs.GetString("Buttons");
		sa=ss.Split("|"[0]);
		buttons=new CButton[sa.length-1];
		for(i=0;i<buttons.length;i++){
			buttons[i]=new CButton(sa[i].Split(";"[0])[0],int.Parse(sa[i].Split(";"[0])[1]));
		}
	}
	function GetAxisButtonP(nm:String):String{
		for(var ax in axes)
			if(ax.name==nm)
				return ax.positiveButton.ToString();
		return "UNINITIALIZED";
	}
	function GetAxisButtonN(nm:String):String{
		for(var ax in axes)
			if(ax.name==nm)
				return ax.negativeButton.ToString();
		return "UNINITIALIZED";
	}
	function GetButtonName(nm:String):String{
		for(var bt in buttons)
			if(bt.name==nm)
				return bt.positiveButton.ToString();
		return "UNINITIALIZED";
	}
	
	function SetAxisP(nm:String,kc:KeyCode){
		for(var ax in axes)
			if(ax.name==nm)
				ax.positiveButton=kc;
	}
	function SetAxisN(nm:String,kc:KeyCode){
		for(var ax in axes)
			if(ax.name==nm)
				ax.negativeButton=kc;
	}
	function SetButton(nm:String,kc:KeyCode){
		for(var bt in buttons)
			if(bt.name==nm)
				bt.positiveButton=kc;
	}
}
class CAxis{
	var name:String;
	var positiveButton:KeyCode;
	var negativeButton:KeyCode;
	var sensitivity:float=5;
	var value:float=0;
	function CAxis(nm:String,nb:KeyCode,pb:KeyCode,sen:float){
		name=nm;
		sensitivity=sen;
		positiveButton=pb;
		negativeButton=nb;
	}
}
class CButton{
	var name:String;
	var positiveButton:KeyCode;
	var framesHeld:int;
	var previousFramesHeld:int;
	function CButton(nm:String,bt:KeyCode){
		positiveButton=bt;
		name=nm;
	}
}
var isTemporary:boolean=true;




///////////*



For initialization, look into modifying the InitializeInputs function.
08:35 - Professor Slack: It works with KeyCodes. In order to actually use it, you need to have one of your scripts call CInput.ReadInputs() whenever your game starts, and CInput.Update() every frame.
08:36 - Sirius ?: fun
08:36 - Professor Slack: In order to save the inputs after you've modified them in-game or something, you call CInput.SaveInputs().
08:36 - Professor Slack: Here is a GUI example for editing inputs:
08:37 - Professor Slack: Oh, also. You can get button names for your UI.
08:37 - Professor Slack: Like, your use prompts and all that can read the button name that is used.
08:37 - Professor Slack: GUI.Box(Rect(5,240,180,50),CInput.GetButtonName("Roll")+": Roll");
08:37 - Professor Slack: GetButtonName, GetAxisNameP, GetAxisNameN
08:39 - Professor Slack: Okay, give me a second.







*/

var inputReceive:boolean=false;
var inputPointer:String;
var altInputPointer:int;
var pointerAxis:boolean=false;
var scrollPositions:Vector2[]=new Vector2[2];  
 
 
 
        if(isinoptions==5){//Menu page with the controls rebinding
                //GUI.Box(Rect((1024*0.5)-260,598-373,520,350),"");
                //GUI.Box(Rect((1024*0.5)-260,598-373,520,350),"");
                //GUI.Box(Rect((1024*0.5)-260,598-373,520,350),"");
 
                GUILayout.BeginArea(Rect((1024*0.5)-260,598-373,520,350));
                GUILayout.BeginVertical("box");
                        GUILayout.Box("Movement");
                        for(var ax in CInput.axes){
                                GUILayout.BeginHorizontal("textfield");
                                        GUILayout.Box(ax.name,GUILayout.Width(150));
                                        if(GUILayout.Button(ax.positiveButton.ToString())){
                                                inputReceive=false;
                                                isinoptions=609;
                                                inputPointer=ax.name;
                                                pointerAxis=true;
                                                altInputPointer=0;
                                        }
                                       
                                        if(GUILayout.Button(ax.negativeButton.ToString())){
                                                inputReceive=false;
                                                isinoptions=609;
                                                inputPointer=ax.name;
                                                pointerAxis=true;
                                                altInputPointer=1;
                                        }
                                GUILayout.EndHorizontal();
                        }
                GUILayout.EndVertical();
               
                GUILayout.BeginVertical("box");
                        GUILayout.Box("Actions");
                        GUILayout.BeginHorizontal();
                                GUILayout.FlexibleSpace();
                                scrollPositions[0]=GUILayout.BeginScrollView(scrollPositions[0],GUILayout.Width(350));
                                        for(var bt in CInput.buttons){
                                                GUILayout.BeginHorizontal("textfield",GUILayout.Width(300));
                                                        GUILayout.Box(bt.name,GUILayout.Width(150));
                                                        if(GUILayout.Button(bt.positiveButton.ToString())){
                                                                inputReceive=false;
                                                                isinoptions=609;
                                                                inputPointer=bt.name;
                                                                pointerAxis=false;
                                                                altInputPointer=0;
                                                        }
                                                GUILayout.EndHorizontal();
                                        }
                                GUILayout.EndScrollView();
                                GUILayout.FlexibleSpace();
                        GUILayout.EndHorizontal();
                GUILayout.EndVertical();
               
                GUILayout.EndArea();
               
                GUI.Box (Rect (10,598-130,120,107), "Controls");
                GUI.Box (Rect (10,598-130,120,107), "Controls");
                GUI.Box (Rect (10,598-130,120,107), "Controls");
               
                if(GUI.Button (Rect (15,598-105,110,20), "Save")) {
                        CInput.SaveInputs();
                        inputReceive=true;
                        isinoptions=0;
                }
                if(GUI.Button (Rect (15,598-80,110,20), "Revert")) {
                        CInput.LoadInputs();
                }
                if(GUI.Button (Rect (15,598-55,110,20), "Defaults")) {
                        CInput.InitializeInputs();
                }
        }
        else if(isinoptions==609){
                GUI.Box(Rect(-100,-100,2000,2000),"");
                GUI.Box(Rect(-100,-100,2000,2000),"");
                GUI.Box(Rect(-100,-100,2000,2000),"");
                GUI.Box(Rect(512-150,598*0.5-15,300,30),"Press key for: "+inputPointer);
                var ev : Event = Event.current;
                if (ev.isKey||ev.functionKey) {
                        Debug.Log("Detected key code: " + ev.keyCode);
                        if(ev.keyCode==KeyCode.Escape){
                                isinoptions=5;
                                inputReceive=true;
                        }
                        if(pointerAxis){
                                if(altInputPointer==0){
                                        CInput.SetAxisP(inputPointer,ev.keyCode);
                                }
                                else{
                                        CInput.SetAxisN(inputPointer,ev.keyCode);
                                }
                        }
                        else{
                                CInput.SetButton(inputPointer,ev.keyCode);
                        }
                        inputReceive=true;
                        isinoptions=5;
                }
                else if(ev.isMouse){
                        if(!pointerAxis){
                                if(Input.GetMouseButton(0))
                                        CInput.SetButton(inputPointer,KeyCode.Mouse0);
                                else if(Input.GetMouseButton(1))
                                        CInput.SetButton(inputPointer,KeyCode.Mouse1);
                                else if(Input.GetMouseButton(2))
                                        CInput.SetButton(inputPointer,KeyCode.Mouse2);
                                else if(Input.GetMouseButton(3))
                                        CInput.SetButton(inputPointer,KeyCode.Mouse3);
                                else if(Input.GetMouseButton(4))
                                        CInput.SetButton(inputPointer,KeyCode.Mouse4);
                                else if(Input.GetMouseButton(5))
                                        CInput.SetButton(inputPointer,KeyCode.Mouse5);
                                else if(Input.GetMouseButton(6))
                                        CInput.SetButton(inputPointer,KeyCode.Mouse6);
                                       
                                inputReceive=true;
                                isinoptions=5;
                        }
                        else{
                                if(altInputPointer==0){
                                        if(Input.GetMouseButton(0))
                                                CInput.SetAxisP(inputPointer,KeyCode.Mouse0);
                                        else if(Input.GetMouseButton(1))
                                                CInput.SetAxisP(inputPointer,KeyCode.Mouse1);
                                        else if(Input.GetMouseButton(2))
                                                CInput.SetAxisP(inputPointer,KeyCode.Mouse2);
                                        else if(Input.GetMouseButton(3))
                                                CInput.SetAxisP(inputPointer,KeyCode.Mouse3);
                                        else if(Input.GetMouseButton(4))
                                                CInput.SetAxisP(inputPointer,KeyCode.Mouse4);
                                        else if(Input.GetMouseButton(5))
                                                CInput.SetAxisP(inputPointer,KeyCode.Mouse5);
                                        else if(Input.GetMouseButton(6))
                                                CInput.SetAxisP(inputPointer,KeyCode.Mouse6);
                                }
                                else{
                                        if(Input.GetMouseButton(0))
                                                CInput.SetAxisN(inputPointer,KeyCode.Mouse0);
                                        else if(Input.GetMouseButton(1))
                                                CInput.SetAxisN(inputPointer,KeyCode.Mouse1);
                                        else if(Input.GetMouseButton(2))
                                                CInput.SetAxisN(inputPointer,KeyCode.Mouse2);
                                        else if(Input.GetMouseButton(3))
                                                CInput.SetAxisN(inputPointer,KeyCode.Mouse3);
                                        else if(Input.GetMouseButton(4))
                                                CInput.SetAxisN(inputPointer,KeyCode.Mouse4);
                                        else if(Input.GetMouseButton(5))
                                                CInput.SetAxisN(inputPointer,KeyCode.Mouse5);
                                        else if(Input.GetMouseButton(6))
                                                CInput.SetAxisN(inputPointer,KeyCode.Mouse6);
                                }
                                inputReceive=true;
                                isinoptions=5;
                        }
                }
                else if(ev.shift){
                        if(!pointerAxis){
                                if(Input.GetKey(KeyCode.RightShift)){
                                        CInput.SetButton(inputPointer,KeyCode.RightShift);
                                }
                                if(Input.GetKey(KeyCode.LeftShift)){
                                        CInput.SetButton(inputPointer,KeyCode.LeftShift);
                                }
                        }
                        else{
                                if(altInputPointer==0){
                                        if(Input.GetKeyDown(KeyCode.RightShift)){
                                                CInput.SetAxisP(inputPointer,KeyCode.RightShift);
                                        }
                                        if(Input.GetKeyDown(KeyCode.LeftShift)){
                                                CInput.SetAxisP(inputPointer,KeyCode.LeftShift);
                                        }
                                }
                                else{
                                        if(Input.GetKeyDown(KeyCode.RightShift)){
                                                CInput.SetAxisN(inputPointer,KeyCode.RightShift);
                                        }
                                        if(Input.GetKeyDown(KeyCode.LeftShift)){
                                                CInput.SetAxisN(inputPointer,KeyCode.LeftShift);
                                        }
                                }
                        }
                        inputReceive=true;
                        isinoptions=5;
                }
        }


///////////////////*



*/